{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"oOAceA,G,MAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,MCC3BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAe,MAAXA,EACK,KAGF,yBAAKJ,UAAU,SAASI,ICWlBC,EAhBA,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGCSS,EAfA,WAEb,OADgBC,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC2E5BK,EAlFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAKwBN,mBAAS,IALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAAAmB,GACxBT,EAASS,QAEV,IAEH,IAmBMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAuBhE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASuB,IACvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAACtC,EAAMqB,GAAP,OACf,kBAAC,EAAD,CACEkB,IAAKlB,EACLrB,KAAMA,EACNC,iBAAkB,kBAnCD,SAAAoB,GAChB,sCAAkCA,GAA3C,IACMrB,EAAOyB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAChD+B,EACUb,EAAIqB,GACX1B,MAAK,SAAA2B,GACJjB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAKA,EAAKqB,KAAOA,EAAKrB,EAAO2C,SAErDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJhC,EAAKK,QADD,sCAGfyC,YAAW,WACTd,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEpB,KAAOA,SAkBR0B,CAAmB/C,EAAKqB,WAItD,0BAAM2B,SA5DM,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASsB,EACTT,MAAM,IAAIkC,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,GAC3BlC,GAAII,EAAM+B,OAAS,GAErBtB,EAAmBiB,GAAYnC,MAAK,SAAA2B,GAClCjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,SAmDT,2BAAO8B,MAAO/B,EAASgC,SA/CJ,SAAAV,GACvBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA8CpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,QCnFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4d910a77.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"../index.css\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React, { useState, useEffect } from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message == null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from \"axios\";\n\n// const baseUrl = \"http://localhost:3001/notes\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\nimport noteService from \"./services/notes\";\n\nimport \"./index.css\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  // const [errorMessage, setErrorMessage] = useState(\"some error happened...\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      data: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        // alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, id) => (\n          <Note\n            key={id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}